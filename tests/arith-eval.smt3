(declare-type Int ())
(declare-type Real ())

(declare-consts <numeral> Int)
(declare-consts <rational> Real)

(declare-const = (-> (! Type :var T :implicit) T T Bool))

(program a.typeunion ()
    (Type Type) Type
    (
      ((a.typeunion Int Int) Int)
      ((a.typeunion Int Real) Real)
      ((a.typeunion Real Int) Real)
      ((a.typeunion Real Real) Real)
    )
)

(declare-const + (-> (! Type :var T :implicit) 
                     (! Type :var U :implicit) 
                     T U (a.typeunion T U)))
(declare-const - (-> (! Type :var T :implicit) 
                     (! Type :var U :implicit) 
                     T U (a.typeunion T U)))
(declare-const < (-> (! Type :var T :implicit) 
                      T T Bool))
(declare-const <= (-> (! Type :var T :implicit) 
                      T T Bool))

(program run_evaluate ((T Type) (U Type) (S Type) (a T) (b U) (z S))
    (S) S
    (
      ((run_evaluate (= a b))  (alf.is_eq (run_evaluate a) (run_evaluate b)))
      ((run_evaluate (< a b))  (alf.is_neg (run_evaluate (- a b))))
      ((run_evaluate (<= a b)) (alf.define ((x (run_evaluate (- a b)))) 
                                 (alf.or (alf.is_neg x) (alf.is_eq (alf.to_q x) 0/1))))
      ((run_evaluate (+ a b))  (alf.add (run_evaluate a) (run_evaluate b)))
      ((run_evaluate (- a b))  (alf.add (run_evaluate a) (alf.neg (run_evaluate b))))
      ((run_evaluate z)        z)
    )
)

(declare-rule eval
   ((T Type) (U Type) (a T) (b U))
   :premises ()
   :args (a b)
   :requires (((run_evaluate a) (run_evaluate b)))
   :conclusion (= a b)
)

